{"version":3,"file":"assets/js/posts_java_basic_oop-basics.html.76ab0bd2.js","mappings":";kLACAA,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IAGtDD,EAAA,QAAkB,CAACE,EAAKC,KACpB,MAAMC,EAASF,EAAIG,WAAaH,EAChC,IAAK,MAAOI,EAAKC,KAAQJ,EACrBC,EAAOE,GAAOC,EAElB,OAAOH,CAAM,ybCTP,wBAyNJ,yBAzNN,+ygCCCA,MAAMI,EAAOC,KAAKC,MAAM,spFCAxB,MAAMC,EAAS,CAAC,EAKhB,GAFiC,+DAAgBA,EAAQ,CAAC,CAAC,SAAS,EAAAC","sources":["webpack://healer-blog/./node_modules/vue-loader/dist/exportHelper.js","webpack://healer-blog/./src/.vuepress/.temp/pages/posts/java/basic/oop-basics.html.vue","webpack://healer-blog/./src/.vuepress/.temp/pages/posts/java/basic/oop-basics.html.js","webpack://healer-blog/./src/.vuepress/.temp/pages/posts/java/basic/oop-basics.html.vue?0f49"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// runtime helper for setting properties on components\n// in a tree-shakable way\nexports.default = (sfc, props) => {\n    const target = sfc.__vccOpts || sfc;\n    for (const [key, val] of props) {\n        target[key] = val;\n    }\n    return target;\n};\n","<template><div><h1 id=\"java-面向对象基础\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#java-面向对象基础\"><span>Java 面向对象基础</span></a></h1>\n<h2 id=\"面向对象编程概述\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#面向对象编程概述\"><span>面向对象编程概述</span></a></h2>\n<p>面向对象编程（Object-Oriented Programming，简称 OOP）是一种编程范式，它将数据和操作数据的方法封装在一起，形成一个对象。Java 是一个纯面向对象的编程语言，具有以下特点：</p>\n<ul>\n<li>封装性</li>\n<li>继承性</li>\n<li>多态性</li>\n<li>抽象性</li>\n</ul>\n<h2 id=\"类与对象\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#类与对象\"><span>类与对象</span></a></h2>\n<h3 id=\"类的定义\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#类的定义\"><span>类的定义</span></a></h3>\n<p>类是创建对象的模板，它定义了对象的属性和行为。一个类包含：</p>\n<ul>\n<li>成员变量（属性）</li>\n<li>构造方法</li>\n<li>成员方法（行为）</li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Person</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // 成员变量</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    private</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> String</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    private</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> int</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> age</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">    </span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // 构造方法</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    public</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> Person</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">String</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">int</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> age</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">        this</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> name;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">        this</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">age</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> age;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">    </span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // 成员方法</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> void</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> sayHello</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">        System</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">out</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">println</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"Hello, I am \"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> +</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> name);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3 id=\"对象的创建和使用\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#对象的创建和使用\"><span>对象的创建和使用</span></a></h3>\n<p>对象是类的实例，通过 <code v-pre>new</code> 关键字创建：</p>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Person</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> person </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> Person</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"张三\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 25</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">person</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">sayHello</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2 id=\"封装\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#封装\"><span>封装</span></a></h2>\n<p>封装是将数据（属性）和操作数据的方法（行为）包装在一个类中，并对外隐藏实现细节。</p>\n<h3 id=\"访问修饰符\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#访问修饰符\"><span>访问修饰符</span></a></h3>\n<ul>\n<li><code v-pre>private</code>：只能在类内部访问</li>\n<li><code v-pre>default</code>：只能在同一个包内访问</li>\n<li><code v-pre>protected</code>：可以在同一个包内和子类中访问</li>\n<li><code v-pre>public</code>：可以在任何地方访问</li>\n</ul>\n<h3 id=\"getter-和-setter\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#getter-和-setter\"><span>getter 和 setter</span></a></h3>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Person</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    private</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> String</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">    </span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // getter</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    public</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> String</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> getName</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        return</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> name;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">    </span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // setter</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> void</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> setName</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">String</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">        this</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> name;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2 id=\"继承\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#继承\"><span>继承</span></a></h2>\n<p>继承允许我们基于现有的类创建新的类，新类继承现有类的属性和方法。</p>\n<h3 id=\"继承的语法\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#继承的语法\"><span>继承的语法</span></a></h3>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Animal</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    protected</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> String</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> name</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">    </span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> void</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> eat</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">        System</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">out</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">println</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"动物在吃东西\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Dog</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> extends</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Animal</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> void</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> bark</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">        System</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">out</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">println</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"汪汪汪\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3 id=\"方法重写\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#方法重写\"><span>方法重写</span></a></h3>\n<p>子类可以重写父类的方法：</p>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Dog</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> extends</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Animal</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    @</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#E5C07B\">Override</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> void</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> eat</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">        System</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">out</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">println</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"狗在吃骨头\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2 id=\"多态\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#多态\"><span>多态</span></a></h2>\n<p>多态是指同一个行为具有多个不同表现形式或形态的能力。</p>\n<h3 id=\"多态的实现方式\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#多态的实现方式\"><span>多态的实现方式</span></a></h3>\n<ol>\n<li>方法重写</li>\n<li>接口实现</li>\n<li>抽象类和抽象方法</li>\n</ol>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> interface</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Animal</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    void</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> makeSound</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Dog</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> implements</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Animal</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    @</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#E5C07B\">Override</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> void</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> makeSound</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">        System</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">out</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">println</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"汪汪汪\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Cat</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> implements</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Animal</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    @</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#E5C07B\">Override</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> void</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> makeSound</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">        System</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">out</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">println</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"喵喵喵\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2 id=\"抽象类与接口\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#抽象类与接口\"><span>抽象类与接口</span></a></h2>\n<h3 id=\"抽象类\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#抽象类\"><span>抽象类</span></a></h3>\n<p>抽象类用 <code v-pre>abstract</code> 关键字声明，可以包含抽象方法和具体方法：</p>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> abstract</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Shape</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    protected</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> String</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> color</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">    </span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // 抽象方法</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> abstract</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> double</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> getArea</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">    </span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // 具体方法</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> void</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> setColor</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">String</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> color</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">        this</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">color</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\"> =</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> color;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h3 id=\"接口\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#接口\"><span>接口</span></a></h3>\n<p>接口定义了一组抽象方法，实现类必须实现这些方法：</p>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> interface</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Flyable</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    void</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> fly</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    void</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> land</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2 id=\"包管理\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#包管理\"><span>包管理</span></a></h2>\n<p>包用于组织类和接口，避免命名冲突：</p>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\" v-pre=\"\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">package</span><span style=\"--shiki-light:#383A42;--shiki-dark:#C678DD\"> com.example</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> MyClass</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    // 类的实现</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div><h2 id=\"最佳实践\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#最佳实践\"><span>最佳实践</span></a></h2>\n<ol>\n<li>\n<p><strong>单一职责原则</strong></p>\n<ul>\n<li>一个类应该只有一个改变的理由</li>\n<li>类的职责应该单一</li>\n</ul>\n</li>\n<li>\n<p><strong>开闭原则</strong></p>\n<ul>\n<li>对扩展开放，对修改关闭</li>\n<li>使用抽象类和接口</li>\n</ul>\n</li>\n<li>\n<p><strong>里氏替换原则</strong></p>\n<ul>\n<li>子类必须能够替换父类</li>\n<li>保持继承关系的正确性</li>\n</ul>\n</li>\n<li>\n<p><strong>接口隔离原则</strong></p>\n<ul>\n<li>接口应该小而专一</li>\n<li>避免胖接口</li>\n</ul>\n</li>\n<li>\n<p><strong>依赖倒置原则</strong></p>\n<ul>\n<li>高层模块不应该依赖低层模块</li>\n<li>都应该依赖抽象</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"常见问题\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#常见问题\"><span>常见问题</span></a></h2>\n<ol>\n<li>\n<p><strong>构造方法可以继承吗？</strong></p>\n<ul>\n<li>构造方法不能被继承</li>\n<li>子类必须调用父类的构造方法</li>\n</ul>\n</li>\n<li>\n<p><strong>final 关键字的作用</strong></p>\n<ul>\n<li>修饰类：类不能被继承</li>\n<li>修饰方法：方法不能被重写</li>\n<li>修饰变量：变量变成常量</li>\n</ul>\n</li>\n<li>\n<p><strong>static 关键字的作用</strong></p>\n<ul>\n<li>修饰成员变量：变成类变量</li>\n<li>修饰成员方法：变成类方法</li>\n<li>修饰代码块：变成静态代码块</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"练习\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#练习\"><span>练习</span></a></h2>\n<ol>\n<li>创建一个 <code v-pre>Shape</code> 抽象类，包含计算面积和周长的方法</li>\n<li>创建 <code v-pre>Circle</code> 和 <code v-pre>Rectangle</code> 类继承 <code v-pre>Shape</code></li>\n<li>实现一个简单的动物类继承体系</li>\n</ol>\n<div class=\"hint-container tip\">\n<p class=\"hint-container-title\">提示</p>\n<p>建议动手实践这些概念，通过编写代码来加深理解。</p>\n</div>\n<div class=\"hint-container info\">\n<p class=\"hint-container-title\">扩展阅读</p>\n<ul>\n<li><a href=\"https://docs.oracle.com/javase/tutorial/java/javaOO/\" target=\"_blank\" rel=\"noopener noreferrer\">Java 官方文档 - 类和对象</a></li>\n<li><a href=\"https://refactoring.guru/design-patterns\" target=\"_blank\" rel=\"noopener noreferrer\">设计模式</a></li>\n</ul>\n</div>\n</div></template>\n\n\n","import comp from \"/home/runner/work/healer-blog/healer-blog/src/.vuepress/.temp/pages/posts/java/basic/oop-basics.html.vue\"\nconst data = JSON.parse(\"{\\\"path\\\":\\\"/posts/java/basic/oop-basics.html\\\",\\\"title\\\":\\\"Java 面向对象基础\\\",\\\"lang\\\":\\\"zh-CN\\\",\\\"frontmatter\\\":{\\\"title\\\":\\\"Java 面向对象基础\\\",\\\"icon\\\":\\\"java\\\",\\\"category\\\":[\\\"Java 核心\\\"],\\\"tag\\\":[\\\"Java\\\",\\\"面向对象\\\",\\\"基础\\\"],\\\"date\\\":\\\"2024-03-19T00:00:00.000Z\\\",\\\"description\\\":\\\"Java 面向对象基础 面向对象编程概述 面向对象编程（Object-Oriented Programming，简称 OOP）是一种编程范式，它将数据和操作数据的方法封装在一起，形成一个对象。Java 是一个纯面向对象的编程语言，具有以下特点： 封装性 继承性 多态性 抽象性 类与对象 类的定义 类是创建对象的模板，它定义了对象的属性和行为。一个类包含...\\\",\\\"head\\\":[[\\\"meta\\\",{\\\"property\\\":\\\"og:url\\\",\\\"content\\\":\\\"https://mister-hope.github.io/healer-blog/posts/java/basic/oop-basics.html\\\"}],[\\\"meta\\\",{\\\"property\\\":\\\"og:site_name\\\",\\\"content\\\":\\\"healer's blog\\\"}],[\\\"meta\\\",{\\\"property\\\":\\\"og:title\\\",\\\"content\\\":\\\"Java 面向对象基础\\\"}],[\\\"meta\\\",{\\\"property\\\":\\\"og:description\\\",\\\"content\\\":\\\"Java 面向对象基础 面向对象编程概述 面向对象编程（Object-Oriented Programming，简称 OOP）是一种编程范式，它将数据和操作数据的方法封装在一起，形成一个对象。Java 是一个纯面向对象的编程语言，具有以下特点： 封装性 继承性 多态性 抽象性 类与对象 类的定义 类是创建对象的模板，它定义了对象的属性和行为。一个类包含...\\\"}],[\\\"meta\\\",{\\\"property\\\":\\\"og:type\\\",\\\"content\\\":\\\"article\\\"}],[\\\"meta\\\",{\\\"property\\\":\\\"og:locale\\\",\\\"content\\\":\\\"zh-CN\\\"}],[\\\"meta\\\",{\\\"property\\\":\\\"og:updated_time\\\",\\\"content\\\":\\\"2025-03-19T14:53:38.000Z\\\"}],[\\\"meta\\\",{\\\"property\\\":\\\"article:tag\\\",\\\"content\\\":\\\"Java\\\"}],[\\\"meta\\\",{\\\"property\\\":\\\"article:tag\\\",\\\"content\\\":\\\"面向对象\\\"}],[\\\"meta\\\",{\\\"property\\\":\\\"article:tag\\\",\\\"content\\\":\\\"基础\\\"}],[\\\"meta\\\",{\\\"property\\\":\\\"article:published_time\\\",\\\"content\\\":\\\"2024-03-19T00:00:00.000Z\\\"}],[\\\"meta\\\",{\\\"property\\\":\\\"article:modified_time\\\",\\\"content\\\":\\\"2025-03-19T14:53:38.000Z\\\"}],[\\\"script\\\",{\\\"type\\\":\\\"application/ld+json\\\"},\\\"{\\\\\\\"@context\\\\\\\":\\\\\\\"https://schema.org\\\\\\\",\\\\\\\"@type\\\\\\\":\\\\\\\"Article\\\\\\\",\\\\\\\"headline\\\\\\\":\\\\\\\"Java 面向对象基础\\\\\\\",\\\\\\\"image\\\\\\\":[\\\\\\\"\\\\\\\"],\\\\\\\"datePublished\\\\\\\":\\\\\\\"2024-03-19T00:00:00.000Z\\\\\\\",\\\\\\\"dateModified\\\\\\\":\\\\\\\"2025-03-19T14:53:38.000Z\\\\\\\",\\\\\\\"author\\\\\\\":[{\\\\\\\"@type\\\\\\\":\\\\\\\"Person\\\\\\\",\\\\\\\"name\\\\\\\":\\\\\\\"Mr.Healer\\\\\\\",\\\\\\\"url\\\\\\\":\\\\\\\"https://healer07.github.io/healer-blog/\\\\\\\"}]}\\\"]]},\\\"git\\\":{\\\"createdTime\\\":1742396018000,\\\"updatedTime\\\":1742396018000,\\\"contributors\\\":[{\\\"name\\\":\\\"HEALER07\\\",\\\"username\\\":\\\"HEALER07\\\",\\\"email\\\":\\\"healer_wyn@163.com\\\",\\\"commits\\\":1,\\\"url\\\":\\\"https://github.com/HEALER07\\\"}]},\\\"readingTime\\\":{\\\"minutes\\\":3.32,\\\"words\\\":995},\\\"filePathRelative\\\":\\\"posts/java/basic/oop-basics.md\\\",\\\"localizedDate\\\":\\\"2024年3月19日\\\",\\\"excerpt\\\":\\\"\\\\n<h2>面向对象编程概述</h2>\\\\n<p>面向对象编程（Object-Oriented Programming，简称 OOP）是一种编程范式，它将数据和操作数据的方法封装在一起，形成一个对象。Java 是一个纯面向对象的编程语言，具有以下特点：</p>\\\\n<ul>\\\\n<li>封装性</li>\\\\n<li>继承性</li>\\\\n<li>多态性</li>\\\\n<li>抽象性</li>\\\\n</ul>\\\\n<h2>类与对象</h2>\\\\n<h3>类的定义</h3>\\\\n<p>类是创建对象的模板，它定义了对象的属性和行为。一个类包含：</p>\\\\n<ul>\\\\n<li>成员变量（属性）</li>\\\\n<li>构造方法</li>\\\\n<li>成员方法（行为）</li>\\\\n</ul>\\\",\\\"autoDesc\\\":true}\")\nexport { comp, data }\n","import { render } from \"./oop-basics.html.vue?vue&type=template&id=e90ef5fa\"\nconst script = {}\n\nimport exportComponent from \"../../../../../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["Object","defineProperty","exports","value","sfc","props","target","__vccOpts","key","val","data","JSON","parse","script","render"],"sourceRoot":""}