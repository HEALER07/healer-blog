/*! For license information please see posts_daily_CompletableFuture.html.58ef565c.js.LICENSE.txt */
"use strict";(self.webpackChunkhealer_blog=self.webpackChunkhealer_blog||[]).push([["posts_daily_CompletableFuture.html"],{"./node_modules/vue-loader/dist/exportHelper.js":(s,i)=>{Object.defineProperty(i,"__esModule",{value:!0}),i.default=(s,i)=>{const a=s.__vccOpts||s;for(const[s,e]of i)a[s]=e;return a}},"./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/@vuepress/bundler-webpack/dist/vuepress-ssr-loader.cjs!./node_modules/vue-loader/dist/index.js??ruleSet[0].use[1]!./src/.vuepress/.temp/pages/posts/daily/CompletableFuture.html.vue?vue&type=template&id=4293b28a":(s,i,a)=>{a.r(i),a.d(i,{render:()=>l});var e=a("./node_modules/vue/dist/vue.runtime.esm-bundler.js");function l(s,i){return(0,e.openBlock)(),(0,e.createElementBlock)("div",null,i[0]||(i[0]=[(0,e.createStaticVNode)('<h1 id="completablefuture-全面解析" tabindex="-1"><a class="header-anchor" href="#completablefuture-全面解析"><span>CompletableFuture 全面解析</span></a></h1><p><code>CompletableFuture</code> 是 Java 8 引入的一个强大的异步编程工具类，它结合了 <code>Future</code> 和 <code>CompletionStage</code> 的特性，提供了更灵活的异步任务执行和结果处理能力。以下是对其全面解析：</p><hr><h2 id="一、completablefuture-简介" tabindex="-1"><a class="header-anchor" href="#一、completablefuture-简介"><span>一、CompletableFuture 简介</span></a></h2><h3 id="_1-定义" tabindex="-1"><a class="header-anchor" href="#_1-定义"><span>1. 定义</span></a></h3><p><code>CompletableFuture</code> 是一个实现 <code>Future</code> 和 <code>CompletionStage</code> 接口的类，用于表示异步计算的结果，并支持链式调用和组合操作。</p><h3 id="_2-核心功能" tabindex="-1"><a class="header-anchor" href="#_2-核心功能"><span>2. 核心功能</span></a></h3><ul><li><strong>异步任务执行</strong>：支持将任务提交到线程池中异步执行。</li><li><strong>结果处理</strong>：提供丰富的回调方法（如 <code>thenApply</code>、<code>thenAccept</code> 等）对任务结果进行处理。</li><li><strong>异常处理</strong>：通过 <code>exceptionally</code> 或 <code>handle</code> 方法捕获并处理任务中的异常。</li><li><strong>组合操作</strong>：支持多个异步任务的组合（如 <code>thenCombine</code>、<code>thenCompose</code> 等）。</li></ul><hr><h2 id="二、常用方法分类" tabindex="-1"><a class="header-anchor" href="#二、常用方法分类"><span>二、常用方法分类</span></a></h2><h3 id="_1-创建-completablefuture" tabindex="-1"><a class="header-anchor" href="#_1-创建-completablefuture"><span>1. 创建 CompletableFuture</span></a></h3><ul><li><strong>静态方法</strong>： <ul><li><code>runAsync(Runnable)</code>：无返回值的异步任务。</li><li><code>runAsync(Runnable, Executor)</code>：指定线程池的无返回值异步任务。</li><li><code>supplyAsync(Supplier&lt;U&gt;)</code>：有返回值的异步任务。</li><li><code>supplyAsync(Supplier&lt;U&gt;, Executor)</code>：指定线程池的有返回值异步任务。</li></ul></li></ul><h3 id="_2-结果处理" tabindex="-1"><a class="header-anchor" href="#_2-结果处理"><span>2. 结果处理</span></a></h3><ul><li><strong>消费型</strong>： <ul><li><code>thenAccept(Consumer)</code>：接受任务结果并执行操作，无返回值。</li></ul></li><li><strong>转换型</strong>： <ul><li><code>thenApply(Function)</code>：将任务结果转换为另一个结果。</li></ul></li><li><strong>执行型</strong>： <ul><li><code>thenRun(Runnable)</code>：任务完成后执行一个无参数的操作。</li></ul></li></ul><h3 id="_3-异常处理" tabindex="-1"><a class="header-anchor" href="#_3-异常处理"><span>3. 异常处理</span></a></h3><ul><li><code>exceptionally(Function&lt;Throwable, T&gt;)</code>：捕获任务中的异常并返回替代值。</li><li><code>handle(BiFunction&lt;T, Throwable, U&gt;)</code>：无论是否发生异常，都执行回调函数。</li></ul><h3 id="_4-组合操作" tabindex="-1"><a class="header-anchor" href="#_4-组合操作"><span>4. 组合操作</span></a></h3><ul><li><strong>并行组合</strong>： <ul><li><code>thenCombine(CompletionStage, BiFunction)</code>：将两个任务的结果合并。</li></ul></li><li><strong>串行组合</strong>： <ul><li><code>thenCompose(Function)</code>：将当前任务的结果作为下一个任务的输入。</li></ul></li><li><strong>多任务组合</strong>： <ul><li><code>allOf(CompletableFuture...)</code>：等待所有任务完成。</li><li><code>anyOf(CompletableFuture...)</code>：等待任意一个任务完成。</li></ul></li></ul><h3 id="_5-阻塞获取结果" tabindex="-1"><a class="header-anchor" href="#_5-阻塞获取结果"><span>5. 阻塞获取结果</span></a></h3><ul><li><code>get()</code>：阻塞等待任务完成并获取结果。</li><li><code>join()</code>：非检查异常版本的 <code>get()</code>。</li></ul><hr><h2 id="三、工作原理" tabindex="-1"><a class="header-anchor" href="#三、工作原理"><span>三、工作原理</span></a></h2><h3 id="_1-核心机制" tabindex="-1"><a class="header-anchor" href="#_1-核心机制"><span>1. 核心机制</span></a></h3><ul><li><strong>异步执行</strong>：通过线程池（默认 <code>ForkJoinPool.commonPool</code> 或自定义线程池）执行任务。</li><li><strong>状态管理</strong>：维护任务的状态（如未完成、已完成、已取消等），并在状态变化时通知回调函数。</li><li><strong>链式调用</strong>：通过回调函数构建任务链，支持复杂的异步流程。</li></ul><h3 id="_2-执行流程" tabindex="-1"><a class="header-anchor" href="#_2-执行流程"><span>2. 执行流程</span></a></h3><ol><li>创建 <code>CompletableFuture</code> 实例。</li><li>提交任务到线程池中异步执行。</li><li>注册回调函数，处理任务结果或异常。</li><li>当任务完成时，触发回调函数，更新状态。</li></ol><hr><h2 id="四、示例代码" tabindex="-1"><a class="header-anchor" href="#四、示例代码"><span>四、示例代码</span></a></h2><h3 id="_1-基本用法" tabindex="-1"><a class="header-anchor" href="#_1-基本用法"><span>1. 基本用法</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> java.util.concurrent.CompletableFuture</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> CompletableFutureExample</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> </span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Exception</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 异步任务 </span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    CompletableFuture</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">future</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> CompletableFuture</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">supplyAsync</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(() </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Hello, CompletableFuture!&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    });</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 获取结果</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> result</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> future</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(result);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-结果处理-1" tabindex="-1"><a class="header-anchor" href="#_2-结果处理-1"><span>2. 结果处理</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">CompletableFuture</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> future </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> CompletableFuture</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">supplyAsync</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(() </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Hello&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">thenApply</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(s </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> s </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot; World&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 转换结果 </span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">thenApply</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(String</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">::</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">toUpperCase);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 再次转换</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">future</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">thenAccept</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">::</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">println);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 输出结果</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-异常处理-1" tabindex="-1"><a class="header-anchor" href="#_3-异常处理-1"><span>3. 异常处理</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">CompletableFuture</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> future </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> CompletableFuture</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">supplyAsync</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(() </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">throw</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> RuntimeException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Error occurred!&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); </span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Success&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">exceptionally</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(ex </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Recovered from: &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> ex</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getMessage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(); </span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">});</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">future</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">thenAccept</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">::</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">println);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 输出 &quot;Recovered from: Error occurred!&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-组合操作-1" tabindex="-1"><a class="header-anchor" href="#_4-组合操作-1"><span>4. 组合操作</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">CompletableFuture</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Integer</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> future1 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> CompletableFuture</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">supplyAsync</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(() </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> </span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">CompletableFuture</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Integer</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> future2 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> CompletableFuture</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">supplyAsync</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(() </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 20</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 并行组合 </span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">CompletableFuture</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Void</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> combinedFuture </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> future1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">thenCombine</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(future2, (a, b) </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> a </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> b)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">thenAccept</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">::</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">println);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 输出 30</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="五、优缺点分析" tabindex="-1"><a class="header-anchor" href="#五、优缺点分析"><span>五、优缺点分析</span></a></h2><h3 id="优点" tabindex="-1"><a class="header-anchor" href="#优点"><span>优点</span></a></h3><ul><li><strong>异步编程支持</strong>：提供强大的异步任务执行能力。</li><li><strong>链式调用</strong>：简化复杂的异步流程，代码更加简洁。</li><li><strong>异常处理</strong>：提供多种方式捕获和处理异常。</li><li><strong>组合操作</strong>：支持多个异步任务的组合，便于构建复杂的业务逻辑。</li></ul><h3 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点"><span>缺点</span></a></h3><ul><li><strong>调试困难</strong>：异步任务在不同线程中执行，增加了调试复杂性。</li><li><strong>学习成本</strong>：链式调用和回调机制需要一定时间理解。</li><li><strong>资源管理</strong>：使用自定义线程池时需注意关闭线程池，避免资源泄漏。</li></ul><hr><h2 id="六、适用场景" tabindex="-1"><a class="header-anchor" href="#六、适用场景"><span>六、适用场景</span></a></h2><ol><li><strong>高并发场景</strong>：如 Web 应用中的异步请求处理。</li><li><strong>复杂业务逻辑</strong>：需要多个异步任务协作完成的场景。</li><li><strong>性能优化</strong>：避免阻塞主线程，提升程序响应性。</li></ol><hr><h2 id="七、总结" tabindex="-1"><a class="header-anchor" href="#七、总结"><span>七、总结</span></a></h2><p><code>CompletableFuture</code> 是 Java 中异步编程的重要工具，提供了丰富的 API 支持异步任务的创建、执行、结果处理和组合操作。虽然其链式调用和回调机制可能增加一定的学习成本，但在实际开发中合理使用可以显著提升程序的性能和可维护性。掌握其核心原理和常见用法，能够帮助开发者更好地应对异步编程挑战。</p>',48)]))}},"./src/.vuepress/.temp/pages/posts/daily/CompletableFuture.html.js":(s,i,a)=>{a.r(i),a.d(i,{comp:()=>e.default,data:()=>l});var e=a("./src/.vuepress/.temp/pages/posts/daily/CompletableFuture.html.vue");const l=JSON.parse('{"path":"/posts/daily/CompletableFuture.html","title":"CompletableFuture","lang":"zh-CN","frontmatter":{"title":"CompletableFuture","icon":"daily","category":["Java"],"tag":["daily","异步任务执行"],"date":"2022-07-19T00:00:00.000Z","description":"CompletableFuture 全面解析 CompletableFuture 是 Java 8 引入的一个强大的异步编程工具类，它结合了 Future 和 CompletionStage 的特性，提供了更灵活的异步任务执行和结果处理能力。以下是对其全面解析： 一、CompletableFuture 简介 1. 定义 CompletableFutur...","head":[["meta",{"property":"og:url","content":"https://healer07.github.io/healer-blog/posts/daily/CompletableFuture.html"}],["meta",{"property":"og:site_name","content":"healer\'s blog"}],["meta",{"property":"og:title","content":"CompletableFuture"}],["meta",{"property":"og:description","content":"CompletableFuture 全面解析 CompletableFuture 是 Java 8 引入的一个强大的异步编程工具类，它结合了 Future 和 CompletionStage 的特性，提供了更灵活的异步任务执行和结果处理能力。以下是对其全面解析： 一、CompletableFuture 简介 1. 定义 CompletableFutur..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-02T09:25:43.000Z"}],["meta",{"property":"article:tag","content":"daily"}],["meta",{"property":"article:tag","content":"异步任务执行"}],["meta",{"property":"article:published_time","content":"2022-07-19T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-02T09:25:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"CompletableFuture\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-07-19T00:00:00.000Z\\",\\"dateModified\\":\\"2025-04-02T09:25:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Healer\\",\\"url\\":\\"https://healer07.github.io/healer-blog/\\"}]}"]]},"git":{"createdTime":1743585943000,"updatedTime":1743585943000,"contributors":[{"name":"HEALER07","username":"HEALER07","email":"healer_wyn@163.com","commits":1,"url":"https://github.com/HEALER07"}]},"readingTime":{"minutes":3.85,"words":1155},"filePathRelative":"posts/daily/CompletableFuture.md","localizedDate":"2022年7月19日","excerpt":"\\n<p><code>CompletableFuture</code> 是 Java 8 引入的一个强大的异步编程工具类，它结合了 <code>Future</code> 和 <code>CompletionStage</code> 的特性，提供了更灵活的异步任务执行和结果处理能力。以下是对其全面解析：</p>\\n<hr>\\n<h2>一、CompletableFuture 简介</h2>\\n<h3>1. 定义</h3>\\n<p><code>CompletableFuture</code> 是一个实现 <code>Future</code> 和 <code>CompletionStage</code> 接口的类，用于表示异步计算的结果，并支持链式调用和组合操作。</p>","autoDesc":true}')},"./src/.vuepress/.temp/pages/posts/daily/CompletableFuture.html.vue":(s,i,a)=>{a.r(i),a.d(i,{default:()=>t});var e=a("./src/.vuepress/.temp/pages/posts/daily/CompletableFuture.html.vue?vue&type=template&id=4293b28a");const l={},t=(0,a("./node_modules/vue-loader/dist/exportHelper.js").default)(l,[["render",e.render]])},"./src/.vuepress/.temp/pages/posts/daily/CompletableFuture.html.vue?vue&type=template&id=4293b28a":(s,i,a)=>{a.r(i),a.d(i,{render:()=>e.render});var e=a("./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/@vuepress/bundler-webpack/dist/vuepress-ssr-loader.cjs!./node_modules/vue-loader/dist/index.js??ruleSet[0].use[1]!./src/.vuepress/.temp/pages/posts/daily/CompletableFuture.html.vue?vue&type=template&id=4293b28a")}}]);
//# sourceMappingURL=posts_daily_CompletableFuture.html.58ef565c.js.map