{"version":3,"file":"assets/js/node_modules_vuepress_client_dist_setupDevtools-QXEOFQJV_js.4fed17b5.js","mappings":";mfAcIA,EAAgB,CAACC,EAAKC,MACxB,yBACE,CAEED,MACAE,GAAI,EAAAC,UACJC,MAAO,EAAAC,aACPC,YAAa,mBACbC,SAAU,6BACVC,KAAM,6CACNC,oBAAqB,CAAC,EAAAC,wBAEvBC,IACC,MAAMC,EAAoBC,OAAOC,QAAQb,GACnCc,EAAiBF,OAAOG,KAAKf,GAC7BgB,EAAmBJ,OAAOK,OAAOjB,GACvCU,EAAIQ,GAAGC,kBAAkBC,IACvBA,EAAQC,aAAaC,MAAMC,QACtBZ,EAAkBa,KAAI,EAAEC,EAAMC,MAAU,CACzCC,KAAM,EAAAlB,qBACNmB,UAAU,EACVC,IAAKJ,EACLK,MAAOJ,EAAKI,UAEf,IAEHpB,EAAIqB,aAAa,CACf9B,GAAI,EAAA+B,aACJ7B,MAAO,EAAA8B,gBACPC,KAAM,YAERxB,EAAIQ,GAAGiB,kBAAkBf,IACnBA,EAAQgB,cAAgB,EAAAJ,eAC5BZ,EAAQiB,UAAYzB,OAAOK,OAAO,EAAAqB,iBAAiBd,KAChDe,IAAS,CACRtC,GAAIsC,EAAKtC,GACTE,MAAOoC,EAAKpC,MACZqC,SAAUD,EAAKxB,KAAKS,KAAKK,IAAQ,CAC/B5B,GAAI4B,EACJ1B,MAAO0B,UAGZ,IAEHnB,EAAIQ,GAAGuB,mBAAmBrB,IACxB,GAAIA,EAAQgB,cAAgB,EAAAJ,aAAc,OAC1C,MAAMU,EAAgB,EAAAJ,gBAAgBlB,EAAQuB,QAC1CD,EACFtB,EAAQE,MAAQ,CACd,CAACoB,EAAcvC,OAAQuC,EAAc3B,KAAKS,KAAKK,IAAQ,CACrDA,MACAC,MAAO9B,EAAW6B,GAAKC,WAKzBhB,EAAe8B,SAASxB,EAAQuB,UAClCvB,EAAQE,MAAQ,CACd,CAAC,EAAAuB,8BAA+B,CAC9B,CACEhB,IAAKT,EAAQuB,OACbb,MAAO9B,EAAWoB,EAAQuB,QAAQb,SAI1C,KAEF,IAAAgB,OAAM9B,GAAkB,KACtBN,EAAIqC,wBACJrC,EAAIsC,mBAAmB,EAAAhB,aAAa,GACpC,GAEL","sources":["webpack://healer-blog/./node_modules/@vuepress/client/dist/setupDevtools-QXEOFQJV.js"],"sourcesContent":["import {\n  COMPONENT_STATE_TYPE,\n  INSPECTOR_ID,\n  INSPECTOR_LABEL,\n  INSPECTOR_NODES,\n  INSPECTOR_STATE_SECTION_NAME,\n  PLUGIN_ID,\n  PLUGIN_LABEL\n} from \"./chunk-XZCIWC7J.js\";\nimport \"./chunk-MLKGABMK.js\";\n\n// src/devtools/setupDevtools.ts\nimport { setupDevtoolsPlugin } from \"@vue/devtools-api\";\nimport { watch } from \"vue\";\nvar setupDevtools = (app, clientData) => {\n  setupDevtoolsPlugin(\n    {\n      // fix recursive reference\n      app,\n      id: PLUGIN_ID,\n      label: PLUGIN_LABEL,\n      packageName: \"@vuepress/client\",\n      homepage: \"https://vuepress.vuejs.org\",\n      logo: \"https://vuepress.vuejs.org/images/hero.png\",\n      componentStateTypes: [COMPONENT_STATE_TYPE]\n    },\n    (api) => {\n      const clientDataEntries = Object.entries(clientData);\n      const clientDataKeys = Object.keys(clientData);\n      const clientDataValues = Object.values(clientData);\n      api.on.inspectComponent((payload) => {\n        payload.instanceData.state.push(\n          ...clientDataEntries.map(([name, item]) => ({\n            type: COMPONENT_STATE_TYPE,\n            editable: false,\n            key: name,\n            value: item.value\n          }))\n        );\n      });\n      api.addInspector({\n        id: INSPECTOR_ID,\n        label: INSPECTOR_LABEL,\n        icon: \"article\"\n      });\n      api.on.getInspectorTree((payload) => {\n        if (payload.inspectorId !== INSPECTOR_ID) return;\n        payload.rootNodes = Object.values(INSPECTOR_NODES).map(\n          (node) => ({\n            id: node.id,\n            label: node.label,\n            children: node.keys.map((key) => ({\n              id: key,\n              label: key\n            }))\n          })\n        );\n      });\n      api.on.getInspectorState((payload) => {\n        if (payload.inspectorId !== INSPECTOR_ID) return;\n        const inspectorNode = INSPECTOR_NODES[payload.nodeId];\n        if (inspectorNode) {\n          payload.state = {\n            [inspectorNode.label]: inspectorNode.keys.map((key) => ({\n              key,\n              value: clientData[key].value\n            }))\n          };\n          return;\n        }\n        if (clientDataKeys.includes(payload.nodeId)) {\n          payload.state = {\n            [INSPECTOR_STATE_SECTION_NAME]: [\n              {\n                key: payload.nodeId,\n                value: clientData[payload.nodeId].value\n              }\n            ]\n          };\n        }\n      });\n      watch(clientDataValues, () => {\n        api.notifyComponentUpdate();\n        api.sendInspectorState(INSPECTOR_ID);\n      });\n    }\n  );\n};\nexport {\n  setupDevtools\n};\n"],"names":["setupDevtools","app","clientData","id","PLUGIN_ID","label","PLUGIN_LABEL","packageName","homepage","logo","componentStateTypes","COMPONENT_STATE_TYPE","api","clientDataEntries","Object","entries","clientDataKeys","keys","clientDataValues","values","on","inspectComponent","payload","instanceData","state","push","map","name","item","type","editable","key","value","addInspector","INSPECTOR_ID","INSPECTOR_LABEL","icon","getInspectorTree","inspectorId","rootNodes","INSPECTOR_NODES","node","children","getInspectorState","inspectorNode","nodeId","includes","INSPECTOR_STATE_SECTION_NAME","watch","notifyComponentUpdate","sendInspectorState"],"sourceRoot":""}